Staying fit is important for every super hero, and Spiderman is no exception. Every day he 
undertakes a climbing exercise in which he climbs a certain distance, rests for a minute, then 
climbs again, rests again, and so on. The exercise is described by a sequence of distances 
d1,d2,…,dm telling how many meters he is to climb before the first first break, before the 
second break, and so on. From an exercise perspective it does not really matter if he climbs 
up or down at the i:th climbing stage, but it is practical to sometimes climb up and sometimes 
climb down so that he both starts and finishes at street level. Obviously, he can never be below 
street level. Also, he would like to use as low a building as possible (he does not like to admit
it, but he is actually afraid of heights). The building must be at least 2 meters higher than the 
highest point his feet reach during the workout.

He wants your help in determining when he should go up and when he should go down. The answer 
must be legal: it must start and end at street level (0 meters above ground) and it may never 
go below street level. Among the legal solutions he wants one that minimizes the required building 
height. When looking for a solution, you may not reorder the distances.

If the distances are 20 20 20 20 he can either climb up, up, down, down or up, down, up, down. 
Both are legal, but the second one is better (in fact optimal) because it only requires a 
building of height 22, whereas the first one requires a building of height 42. If the distances 
are 3 2 5 3 1 2, an optimal legal solution is to go up, up, down, up, down, down. Note that for 
some distance sequences there is no legal solution at all (e.g., for 3 4 2 1 6 4 5).

Input
The first line of the input contains an integer N giving the number of test scenarios, 1≤N≤101. 
The following 2N lines specify the test scenarios, two lines per scenario: the first line gives 
a positive integer M≤40 which is the number of distances, and the following line contains the M 
positive integer distances. For any scenario, the total distance climbed (the sum of the distances
in that scenario) is at most 1000.

Output
For each input scenario a single line should be output. This line should either be the string 
“IMPOSSIBLE” if no legal solution exists, or it should be a string of length M containing only 
the characters “U” and “D”, where the i:th character indicates if Spiderman should climb up or 
down at the i:th stage. If there are several different legal and optimal solutions, output one
of them (it does not matter which one as long as it is optimal).

Sample Input 1		Sample Output 1	
3					UDUD
4					UUDUDD
20 20 20 20			IMPOSSIBLE
6
3 2 5 3 1 2
7
3 4 2 1 6 4 5

Here is some advice on how to proceed

1.	Use dynamic programming techniques to solve this problem

2.	For the time being, forget about generating strings of U and D.  Instead, focus on solving for 
	the minimum height to which Spiderman must rise in order to be able to end up back on the ground.  
	(For cases in which ending up back on the ground is impossible, think of the minimum height as 
	being infinite.)

3.	Conceive of a way to describe subproblems using one or more parameters, so that the solution of
	a particular subproblem can be expressed in terms of the solutions to simpler subproblems.

4.	Produce a recursive function that implements this idea.

5.	Memoize your recursive function.

6.	Find a way to compute the proper sequence of U's and D's from the cache produced when solving a 
	problem.


Think about the way last kattis split things into subproblems. Think about using current height, 
current index in array, and end index in array. Then try taking the min of the max height results 
for each path.



public string SolveForSpiderman(int[] dists)
        {
            /*
            Dictionary<Tuple<int, int, int>, Tuple<int, List<int>>> cache = new Dictionary<Tuple<int, int, int>, Tuple<int, List<int>>>();
            Tuple<int, int, int> key = new Tuple<int, int, int>(1, 0, -1);
            //Tuple<int, List<int>> solution = SolveWorkoutCached(dists, key, cache);
            //Tuple<int, List<int>> solution = SolveWorkoutNoCache(dists, 1, 0, -1);
            if (solution.Item1 == int.MaxValue)
                return "IMPOSSIBLE";
            else
            {
                StringBuilder sb = new StringBuilder();
                for (int i = dists[0] - 1; i >= 0; i--)
                {
                    if (solution.Item2[i] == 1)
                        sb.Append('U');
                    else if (solution.Item2[i] == 0)
                        sb.Append('D');
                }
                return sb.ToString();
            }
            */

        // Tuple<int current_index, int current_height, int move_taken> key
        public Tuple<int, List<int>> SolveWorkoutCached(int[] dists, Tuple<int, int, int> key, Dictionary<Tuple<int, int, int>, Tuple<int, List<int>>> cache)
        {
            List<int> list_of_moves = new List<int>();
            Tuple<int, List<int>> minus_side = new Tuple<int, List<int>>(int.MaxValue, list_of_moves), plus_side, ret;
            Tuple<int, int, int> min_key = new Tuple<int, int, int>(-1, -1, -1), plus_key;
            if (key.Item1 == dists.Length)
            {
                list_of_moves.Add(key.Item3);
                if (key.Item2 > 0)
                    return new Tuple<int, List<int>>(int.MaxValue, list_of_moves);
                else
                    return new Tuple<int, List<int>>(key.Item2, list_of_moves);
            }
            if (key.Item2 - dists[key.Item1] >= 0)
            {
                min_key = new Tuple<int, int, int>(key.Item1 + 1, key.Item2 - dists[key.Item1], 0);
                minus_side = SolveWorkoutCached(dists, min_key, cache);
            }
            plus_key = new Tuple<int, int, int>(key.Item1 + 1, key.Item2 + dists[key.Item1], 1);
            plus_side = SolveWorkoutCached(dists, plus_key, cache);
            if (plus_side.Item1 < minus_side.Item1)
            {
                list_of_moves = plus_side.Item2;
                list_of_moves.Add(key.Item3);
                ret = new Tuple<int, List<int>>(Math.Max(key.Item2, plus_side.Item1), list_of_moves);
            }
            else
            {
                list_of_moves = minus_side.Item2;
                list_of_moves.Add(key.Item3);
                ret = new Tuple<int, List<int>>(Math.Max(key.Item2, minus_side.Item1), list_of_moves);
            }
            return ret;
        }
        public Tuple<int, List<int>> SolveWorkoutNoCache(int[] dists, int current_index, int current_height, int move_taken)
        {
            List<int> list_of_moves = new List<int>();
            Tuple<int, List<int>> minus_side = new Tuple<int, List<int>>(int.MaxValue, list_of_moves), plus_side, ret;
            if (current_index == dists.Length)
            {
                list_of_moves.Add(move_taken);
                if (current_height > 0)
                    return new Tuple<int, List<int>>(int.MaxValue, list_of_moves);
                else
                    return new Tuple<int, List<int>>(current_height, list_of_moves);
            }
            if (current_height - dists[current_index] >= 0)
                minus_side = SolveWorkoutNoCache(dists, current_index + 1, current_height - dists[current_index], 0);
            plus_side = SolveWorkoutNoCache(dists, current_index + 1, current_height + dists[current_index], 1);
            if (plus_side.Item1 < minus_side.Item1)
            {
                list_of_moves = plus_side.Item2;
                list_of_moves.Add(move_taken);
                ret = new Tuple<int, List<int>>(Math.Max(current_height, plus_side.Item1), list_of_moves);
            }
            else
            {
                list_of_moves = minus_side.Item2;
                list_of_moves.Add(move_taken);
                ret = new Tuple<int, List<int>>(Math.Max(current_height, minus_side.Item1), list_of_moves);
            }
            return ret;
        }


        public int MinHeightOriginal(int[] dists, int current_index, int current_height)
        {
            int minus_side = int.MaxValue, plus_side;
            if (current_index == dists.Length)
            {
                if (current_height > 0)
                    return int.MaxValue;
                return current_height;
            }
            if (current_height - dists[current_index] >= 0)
                minus_side = MinHeightOriginal(dists, current_index + 1, current_height - dists[current_index]);
            plus_side = MinHeightOriginal(dists, current_index + 1, current_height + dists[current_index]);
            return Math.Max(current_height, Math.Min(plus_side, minus_side));
        }